//*****************************************************************************
//!
//! @file wwd.c
//! @author Anders Bandt
//! @brief This file contains main function for WWD device
//! @version 0.9
//! @date September 2023
//!
//*****************************************************************************

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//! -----------------------------------------------------------------------------------------------------------------------//
//! HEADER FILES ----------------------------------------------------------------------------------------------------------//
//! -----------------------------------------------------------------------------------------------------------------------//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* Standard C99 stuff */
#include <stdint.h>



/* Driver Header files  */
#include <ti/drivers/dpl/ClockP.h>


/* My header files  */
#include <src/clock.h>




static uint32_t ticksToMs(uint32_t ticks) {
    uint64_t ms = (ticks * ClockP_getSystemTickPeriod()) / 1000;

    if ((uint64_t)ms > (uint32_t)ms)
        {
            return ((uint32_t)~0);
        }
    else
        {
            return ((uint32_t)ms);
        }
}


static uint32_t msToTicks(uint32_t ms) {
    if (ms == 0) {
        return 0;
    }

    uint32_t ticks = (ms * 1000) / ClockP_getSystemTickPeriod();

    /* If ticks is 0, return 1 (the smallest representable value) */
    return ticks ? ticks : 1;
}



// TODO: this function should possibly be static... check the IMU github "golden source" for some extra details
uint32_t get_ms(void) {
    uint32_t ticks = ClockP_getSystemTicks();
    return ticksToMs(ticks);
}


