% LeastSquaresRunner: Script for implementing least squares on training and
% verification data

% Required functions:
    % LeastSquares.m
    % LeastSquaresVerify.m
    % generateA.m
    % tempRateGenerator.m
    % parseLogFilePythonNewFormat.m or parseLogFilePython.m
    % interpolateMensor.m  
    
% Written by Anders Bandt, August 2021

%% Load in 'training' data 
basefilepath = 'M:\Air Data Systems - Common\Common\Systems\Knowledge Base\Analyses and Tests\Dynamic Calibration\Dynamic Cal Tests 2021\'; % directory where the test folders are stored
test = 'Test21_5Hour'; % specific test of interest folder

if exist('Pcount', 'var') == 0 % if Pcount data is not yet loaded into the workspace
    disp("No training pressure data found, loading in new data!") 
    [Pcount, Tcount, FilteredPressure, SetPressure, ControllerPressure] = parseLogFilePythonNewFormat(strcat(basefilepath,test)); % extract data into structs using filepath
    % create normalized structs for analysis purposes. Useful for creating
    % intuitive coefficients but WILL PRODUCE BAD PRESSURE RESULTS when comparing
    % between tests
    PcountNorm = Pcount./max(Pcount);  
    TcountNorm = Tcount./max(Tcount);
else
    disp("Training pressure data found, NOT loading in new data") % otherwise skip loading data in
end

%% Run LeastSquares function on test data and plot
[w, training_pressures, training_residual] = LeastSquares(Pcount, Tcount, ControllerPressure); % creates coefficients (w), new calculated pressures (y), and a residual with respect to ControllerPressure

% create figure showcasing training data residual
close all
figure(1);subplot(2, 1, 1);plot(1:length(training_residual), training_residual); % create figure 1, subplot of training vs. verification residual
title("Training Data Residual vs Sample #");ylabel("Residual (inHg)");xlabel("Sample #")
str = {"Training residual: ", num2str(norm(training_residual))};
annotation('textbox', [.91 .5 .3 .3], 'String', str, 'FitBoxToText', 'on'); % add starting residual to plot
%%% UNCOMMENT BELOW TO ADD TEMP DATA  TO PLOT
hold on
TcountScaled = (Tcount - min(Tcount))/(max(Tcount) - min(Tcount)) - .5;
TcountScaled = TcountScaled * (max(training_residual) - min(training_residual));
plot(1:length(TcountScaled), TcountScaled)
hold off
drawnow % draw the figure right away

%% Load in verification (unseen) data to test and plot
basefilepath = 'M:\Air Data Systems - Common\Common\Systems\Knowledge Base\Analyses and Tests\Dynamic Calibration\Dynamic Cal Tests 2021\';
test = 'Test32_7Hour_20SecWait';

if exist('PcountVerify', 'var')== 0 % if we don't have verification data already loaded
    disp("No verification pressure data found, reading in data based on filepath provided")
    [PcountVerify, TcountVerify, FilteredPressureVerify, SetPressureVerify, ControllerPressureVerify] = parseLogFilePythonNewFormat(strcat(basefilepath,test)); % read in verification data
    PcountNormVerify = PcountVerify./max(PcountVerify);
    TcountNormVerify = TcountVerify./max(TcountVerify);
else
    disp("Verification data found, not loading in new data")
end

[verification_pressures, verification_residual] = LeastSquaresVerify(PcountVerify, TcountVerify, w, ControllerPressureVerify); % call LeastSquaresVerify with the verification data and generated coefficients 'w'
subplot(2, 1, 2);plot(1:length(verification_residual), verification_residual)
title("Verification Data Residual vs Sample #");ylabel("Residual (inHg)");xlabel("Sample #")
str = {"Verification residual: ", num2str(norm(verification_residual))};
annotation('textbox', [.91 .3 .3 .3], 'String', str, 'FitBoxToText', 'on'); % add starting residual to plot
%%% UNCOMMENT BELOW TO ADD TEMP DATA  TO PLOT
hold on
TcountVerifyScaled = (TcountVerify - min(TcountVerify))/(max(TcountVerify) - min(TcountVerify)) - .5;
TcountVerifyScaled = TcountVerifyScaled * (max(verification_residual) - min(verification_residual));
plot(1:length(TcountVerifyScaled), TcountVerifyScaled)
hold off

%% Run a second layer on the training data
% [w, y, training_residual_second_layer] = LeastSquaresSecondLayer(Pcount, Tcount, w, ControllerPressure); % creates coefficients (w), new calculated pressures (y), and a residual with respect to ControllerPressure
% 
% % create figure showcasing training data residual
% subplot(3, 1, 3);plot(1:length(training_residual_second_layer), training_residual_second_layer); % create figure 1, subplot of training vs. verification residual
% title("Training Data Residual vs Sample #");ylabel("Residual (inHg)");xlabel("Sample #")
% str = {"Training residual 2 layer: ", num2str(norm(training_residual_second_layer))};
% annotation('textbox', [.91 .07 .3 .3], 'String', str, 'FitBoxToText', 'on'); % add starting residual to plot
% %%% UNCOMMENT BELOW TO ADD TEMP DATA  TO PLOT
% hold on
% TcountScaled = (Tcount - min(Tcount))/(max(Tcount) - min(Tcount)) - .5;
% TcountScaled = TcountScaled * (max(training_residual_second_layer) - min(training_residual_second_layer));
% plot(1:length(TcountScaled), TcountScaled)
% hold off
% drawnow % draw the figure right away


%% Analyze where the residual is occuring based on a certain threshold value
%figure(2);
%ending_position = length(verification_residual);
%[BadPcountIndices, BadPcountPressures] = analyzeResidual(verification_residual(1:ending_position), PcountNormVerify(1:ending_position), SetPressureVerify(1:ending_position)./max(SetPressureVerify(1:ending_position)), ControllerPressureVerify(1:ending_position)./max(ControllerPressureVerify), 5);



function [w, y, residual] = LeastSquares(Pcount, Tcount, d)
%LeastSquares: Compute Least Squares Matrix Regression
%       This function computes the least squares regression of Aw=d where
% A = matrix of input values according to predefined equation
% d = input truth values to train with
% w = output vector of coefficients
% y = new calculated truth pressures with w
% residual = difference between y - d (calculated truth vs input truth)

% Written by Anders Bandt, August 2021

%% Create matrices and find w from training data (Pcounts and Tcounts)
A = generateA(Pcount, Tcount); % forms A matrix as defined by generateA
w = ((transpose(A)*A)^-1)*transpose(A)*d; % w = C * 1 where C is the number of columns in A (number of coefficients) 
y = A*w; % apply A matrix to newly found coefficients

[residual, euclidean_norm, ~] = generateResidual(y, d); % generate reisidual

disp("coefficients (w) found from data; computed calculated pressure values (y) and formed residual")
format short g
disp(w); % display coefficients
format
disp("Euclidean norm of this training data is: " + num2str(euclidean_norm)) % display 2 norm of the residual

end


function [A2] = generateA2(Pcount, Tcount, coeffs)
% generateA2: creates an A2 matrix using coefficients
% Creating a function for it offers better memory performance
% Written by Anders Bandt, August 2021

N = length(coeffs); % get dimension information

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% 'A2' MATRIX VALUES START HERE %%%%
%%%% UNCOMMENT DESIRED ONE TO USE %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

A = generateA(Pcount, Tcount);
A2 = A.*coeffs';


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% 'A2' MATRIX VALUES END HERE %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end



function [A] = generateA(Pcount,Tcount)
% generateA: creates an A matrix using Pcount and Tcount
% Creating a function for it offers better memory performance
% Written by Anders Bandt, August 2021

N = length(Pcount); % get dimension information
TcountRate = tempRateGenerator(Tcount); % generate TcountRate term using tempRateGenerator

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% 'A' MATRIX VALUES START HERE %%%%
%%%% UNCOMMENT DESIRED ONE TO USE %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% SUPER CRAZY LONG ONE - BAD RESULTS SO FAR!
%  A = [Pcount.^9, Pcount.^8, Pcount.^7,Pcount.^6, Pcount.^5, Pcount.^4, Pcount.^3, Pcount.^2, Pcount, ...
%      Pcount.^3.*Tcount, Pcount.^2.*Tcount, Pcount.*Tcount, ...
%      Tcount.^6, Tcount.^5, Tcount.^4, Tcount.^3, Tcount.^2, Tcount,  ...
%      TcountRate.^4, TcountRate.^3, TcountRate.^2, TcountRate, ...
%      TcountRate.^3.*Pcount, TcountRate.^2.*Pcount, TcountRate.*Pcount, ...
%      Tcount, ...
%      ones(1, N)'
%       ] ;


% UNTESTED
%  A = [Pcount.^5, Pcount.^4, Pcount.^3, Pcount.^2, Pcount, ...
%      Pcount.^3.*Tcount, Pcount.^2.*Tcount, Pcount.*Tcount, ...
%      Tcount.^4, Tcount.^3, Tcount.^2, Tcount,  ...
%      TcountRate.^4, TcountRate.^3, TcountRate.^2, TcountRate, ...
%      Pcount.^3.*TcountRate.^3, Pcount.^2.*TcountRate.^2, ...
%      TcountRate.^5.*Pcount, TcountRate.^4.*Pcount, TcountRate.^3.*Pcount, TcountRate.^2.*Pcount, TcountRate.*Pcount, ...
%      ones(1, N)'
%       ] ;
  

% ALRIGHT RESULTS - ERROR TRENDS MORE NEGATIVE AND PERFORMS BAD AT HIGH
% PRESSURES
 A = [Pcount.^6, Pcount.^5, Pcount.^4, Pcount.^3, Pcount.^2, Pcount, ...
     Pcount.^3.*Tcount, Pcount.^2.*Tcount, Pcount.*Tcount, ...
     Tcount.^3, Tcount.^2, Tcount,  ...
     TcountRate.^4, TcountRate.^3, TcountRate.^2, TcountRate, ...
     TcountRate.^3.*Pcount, TcountRate.^2.*Pcount, TcountRate.*Pcount, ...
     TcountRate.^2.*Tcount, TcountRate.*Tcount, ...
     Pcount.^4.*TcountRate, Pcount.^3.*TcountRate, ...
     Pcount.^2.*TcountRate.^2, ...
     ones(1, N)'
      ] ;
  

% % DECENT - ONE WITH TEMP RATE
%  A = [Pcount.^9, Pcount.^8, Pcount.^7,Pcount.^6, Pcount.^5, Pcount.^4, Pcount.^3, Pcount.^2, Pcount, ...
%      Pcount.^3.*Tcount, Pcount.^2.*Tcount, Pcount.*Tcount, ...
%      Tcount.^2, Tcount, ones(1, N)', ...
%      TcountRate.^3, TcountRate.^2, TcountRate
%       ] ;


% PRETTY GOOD ONE - NO TEMP RATE INVOLVED
%  A = [Pcount.^5, Pcount.^4, Pcount.^3, Pcount.^2, Pcount, ...
%     Pcount.^3.*Tcount, Pcount.^2.*Tcount, Pcount.*Tcount, ...
%     Tcount.^2, Tcount, ...
%     ones(1, N)'];


% NO TEMP RATE INVOLVED - SLIGHTLY OVER CONDITIONS
% %  A = [Pcount.^9, Pcount.^8, Pcount.^7, Pcount.^6, Pcount.^5, Pcount.^4, Pcount.^3, Pcount.^2, Pcount, ...
%     Pcount.^3.*Tcount, Pcount.^2.*Tcount, Pcount.*Tcount, ...
%     Pcount.^3.*Tcount, Pcount.^2.*Tcount, Pcount.*Tcount, ...
%      Tcount.^2, Tcount, ones(1, N)'];
 

% ORIGINAL ONES - NOTHING BETTTER THAN ONES LISTED ABOVE
%A = [Pcount.^2, Pcount, Pcount.*Tcount, Tcount, ones(1, N)'] ; % A = 5 * N
%A = [Pcount.^5, Pcount.^4, Pcount.^3, Pcount.^2, Pcount, Pcount.*Tcount, Tcount, ones(1, N)'] ; % A = 5 * N
%A = [Pcount.^9, Pcount.^8, Pcount.^7, Pcount.^6, Pcount.^5, Pcount.^4, Pcount.^3, Pcount.^2, Pcount, Pcount.*Tcount, Tcount.^3, Tcount.^2, Tcount, ones(1, N)'] ; % A = 5 * N
%A = [Pcount; Pcount.*Tcount; Tcount] ; % A = 3 * N
%A = transpose(A); % take the transpose to get A = N * 5


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% 'A' MATRIX VALUES END HERE %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end



function [tempRate] = tempRateGenerator(Tcount)
% tempRateGenerator: Generates a temperature rate
% Written by Anders Bandt, August 2021

% Method 1: Definition of slope
% tempRate = zeros(length(Tcount), 1);
% tempRate(1:3000) = Tcount(1:3000);
% for i = 3001:length(Tcount)
%     tempRate(i) = 1/300.*(Tcount(i) - Tcount(i-3000));
% end


% Method 2: Definition of slope along with a moving average filter
% tempRate = zeros(length(Tcount), 1);
% for i = 3001:length(Tcount)
%     tempRate(i) = 1/3000.*(Tcount(i) - Tcount(i-3000));
% end
% windowSize = 3000;
% b = (1/windowSize)*ones(1, windowSize);
% a = 1;
% tempRate = filter(b, a, tempRate);


% Method 3: Smoothing Tcounts and then taking slope and then apply
% moving average
TcountSmoothed = smooth(Tcount);
tempRate = zeros(length(Tcount), 1);
for i = 3001:length(Tcount)
    tempRate(i) = 1/3000.*(TcountSmoothed(i) - TcountSmoothed(i-3000));
end
windowSize = 3000;
b = (1/windowSize)*ones(1, windowSize);
a = 1;
tempRate = filter(b, a, tempRate);

end




function [residual, euclidean_norm, fullscale_error] = generateResidual(calculated_pressure, controller_pressure)
% GenerateResidual: Generates a residual along with statics. Also does some
% post processing to eliminate bad data points
%  % Returns:
   % residual: calculated as (calculated - true)
   % euclidean_norm: Euclidean (or '2') norm of the residual
   % fullscale_error: Full scale error
% Written by Anders Bandt, August 2021

disp("Now executing generateResidual.m")
residual = (calculated_pressure - controller_pressure); % compute residual
euclidean_norm = norm(residual);min_res = min(residual);max_res = max(residual); % get residual statistics
fullscale_error = (max_res - min_res)*max(controller_pressure)/100; % compute full scale error
disp("Euclidean norm of unmodified residual: " + num2str(euclidean_norm) + "    Fullscale: " + num2str(fullscale_error) + "%")


%%%%%%%% UNCOMMENT THE BELOW CODE IF YOU WOULD LIKE TO TRIM SOME BAD DATA
%%%%%%%% INDEXES ACCORDING TO A CERTAIN THRESHOLD !!!!! THANK YOU %%%%%%%\
% disp("WARNING: RESIDUAL THRESHOLD REMOVAL IS ON")
% threshold = 10000*median(residual(:)); % set removal threshold here
% disp("Removing residual spikes above +/- " + num2str(threshold))
% bad_logical = (residual(:) > threshold); % find where the residual is greater than some threshold
% bad_indexes = find(bad_logical == 1); % find the indexes corresponding to the bad residual values
% residual = residual(~bad_indexes); % choose everything but the bad indices
% disp("Removed " + num2str(length(bad_indexes)) + " data points")
% %disp("Bad data spikes found here: " + find(bad_indices == 1))
% euclidean_norm = norm(residual);min_res = min(residual);max_res = max(residual); % get residual statistics
% fullscale_error = (max_res - min_res)*max(controller_pressure)/100; % compute full scale error
% disp("Post data removal Euclidean norm: " + num2str(euclidean_norm) + "    Fullscale: " + num2str(fullscale_error) + "%")

end



function [bad_indices, bad_pressures] = analyzeResidual(residual, Pcount, SetPressure, ControllerPressure, threshold)
% analyzeResidual: Analyzes a residual and extracts the bad pressures
  

bad_indices = find(residual > threshold | residual < -threshold);
bad_pressures = Pcount(bad_indices);

hold on;
scatter(bad_indices, bad_pressures*1.01)
scatter(1:length(Pcount), Pcount)
scatter(1:length(SetPressure), SetPressure)
scatter(1:length(ControllerPressure), ControllerPressure)
legend('Bad Pressures', 'Pcount', 'SetPressure', 'ControllerPressure')
hold off;

xlabel('Sample #');
ylabel('Bad Pressure')
title('Plot of Bad Pressures')

end
