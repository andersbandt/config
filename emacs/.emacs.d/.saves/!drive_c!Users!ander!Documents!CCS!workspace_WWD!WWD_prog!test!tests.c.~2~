//*****************************************************************************
//!
//! @file tests.c
//! @author Anders Bandt
//! @brief This file contains main function for WWD device
//! @version 0.9
//! @date April 2024
//!
//*****************************************************************************


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//! -----------------------------------------------------------------------------------------------------------------------//
//! HEADER FILES ----------------------------------------------------------------------------------------------------------//
//! -----------------------------------------------------------------------------------------------------------------------//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* Standard C99 stuff */
#include <stdint.h>
#include <string.h>
#include <unistd.h>

/* My header files  */
#include <src/comm/comm.h>
#include <src/comm/i2c.h>
#include <src/comm/spi.h>
#include <src/comm/uart.h>
#include <src/power/power.h>
#include <src/hardware/led.h>
#include <src/ic/BQ25120A.h>
#include <src/ic/afe/AFE_HostControl.h>
#include <src/ic/imu/imu.h>
#include <src/data/nvs.h>



void test_actions(uart_comm_t * read_packet, Display_Handle display) {
    uart_write("\ttest eval...!\n", 15, display);
    uart_write(read_packet->buffer, read_packet->bytes_read, display);
    uart_write("\n", 1, display);

  /* flash-read */
  if (read_packet.buffer[0] == 'F' && read_packet.buffer[1] == 'R' && read_packet.buffer[2] == '9' && read_packet.buffer[3] == '1') {
	uart_write("FLASH-READ!\n", 12, display);
	uint8_t flash_read[1];
    char *flash_dump = (char *)malloc(5); // Allocate memory for 4 characters plus the null terminator
    strcpy(flash_dump, "xxxx");
	for(int i = 0; i < 0x2000; i++) {
	  nvs_read(flash_read, i, 1); // read 1 byte at a time
	  /* sprintf(flash_dump, "%02X:%02X\n", i, flash_read[0]); */
	  sprintf(flash_dump, "%X:%X\n", i, flash_read[0]);
	  uart_write(flash_dump, strlen(flash_dump), display);
	  usleep(600);// 750 was a LITTLE too short of a delay
	}
  }
  /* end function */

  /* flash-erase */
  if (read_packet.buffer[3] == '2' && read_packet.buffer[2] == '4' && read_packet.buffer[1] == 'E' && read_packet.buffer[0] == 'F') {
	uart_write("FLASH-ERASE!\n", 13, display);
	nvs_erase_region(display);
  }
  /* end function */


  /* imu_graph */
  if (read_packet.buffer[3] == '1' && read_packet.buffer[2] == '8' && read_packet.buffer[1] == 'P' && read_packet.buffer[0] == 'I') {
	uart_write("IMU-GRAPH!\n", 2, display);												  
  }
  /* end function */
  

  /* imu_graph */
  if (read_packet.buffer[3] == '1' && read_packet.buffer[2] == '8' && read_packet.buffer[1] == 'P' && read_packet.buffer[0] == 'I') {
    uart_write("IMU-GRAPH!\n", 2, display);
  }
  /* end function */

}
