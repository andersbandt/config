

import matplotlib.pyplot as plt #import matplotlib library
import serial
from datetime import datetime
from drawnow import *
import csv
import pandas as pd
import serial


class SerialReader:
    def __init__(self, port):
        # initialize serial connection
        self.serObj = serial.Serial(port, 115200)

        # set up some variables
        self.afe_adc = []
        self.plot_cnt = 0

    def init_data_process(self, filename=None):
        # configure some settings
        plt.ion()  # Tell matplotlib you want interactive mode to plot

        # configure .csv output file
        if filename is None:
            prefix = "data/data"
            extension = "csv"
            current_datetime = datetime.now()
            formatted_datetime = current_datetime.strftime("%Y%m%d_%H%M%S")
            filename = f"{prefix}_{formatted_datetime}.{extension}"
        self.open_csv(filename, ["ID", "fifo", "data", "timestamp"])

        # while loop that loops forever
        while True:
            while self.serObj.inWaiting() == 0: # Wait here until there is data
                pass

            # read line of text from serial and format into array
            serStrDat = self.serObj.readline().decode('utf-8').strip().strip('\n')
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
            # dataArray = serStrDat.decode(errors='ignore').strip().strip('\n')
            print(serStrDat)
            if "DATA," in serStrDat:
                # data = serStrDat + f",{timestamp}"
                data_array = serStrDat.split(',')
                data_array.append(timestamp)
                self.append_csv(filename, data_array)
                self.live_plot(data_array)


    def stop_data_process(self):
        print("Stopping serial data processing")
        self.serObj.close()


    def open_csv(self, filename, headers):
        with open(filename, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(headers)

    def append_csv(self, filename, row_data):
        with open(filename, mode='a', newline='') as file:
            writer = csv.writer(file)
            writer.writerows([row_data])


    def live_plot(self, data):
        # Ensure that index is not out of range
        if len(data) > 1:
            fifo = data[1]
            adc = int(data[2])

            self.afe_adc.append(adc)
            plt.pause(.00000001)

            self.plot_cnt = self.plot_cnt+1

            if self.plot_cnt > 100:
                self.afe_adc.pop(0)



##############################################################
################   HELPER FUNCTIONS (not in Class) ###########
##############################################################

### data loading functions

def load_csv(filepath):
    # Load data from CSV file
    df = pd.read_csv(filepath)
    # # Extract columns
    afe_data = df[['timestamp', 'fifo', 'data']]
    # print(afe_data["timestamp"])
    # print(afe_data["fifo"])
    # print(afe_data["data"])
    return afe_data